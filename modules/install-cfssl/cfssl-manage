#!/bin/bash
# shellcheck source=/dev/null
source "$(dirname "$0")/functions.sh"

function cfsslcert(){
    # Create the cfssl certificate signing request:
    if [ -f "${CERTS_PATH}/cfssl.pem" ] || [  -f "${CERTS_PATH}/cfssl-key.pem" ]; then
        echo "using existing cfssl cert" >&1
    else
        mkdir -p ${CERTS_PATH}
        cat > "${CERTS_PATH}/cfssl-csr.json" <<EOF
{
  "CN": "cfssl",
  "key": {
    "algo": "${KEY_ALGO}",
    "size": ${KEY_SIZE}
  },
  "names": [
    {
      "C": "${C}",
      "L": "${L}",
      "O": "${O}:cfssl",
      "OU": "${OU}",
      "ST": "${ST}"
    }
  ]
}
EOF

        # Generate the cfssl client certificate and private key:
        (cd ${CERTS_PATH} && "$CFSSL_BIN" gencert \
                                   -ca="${CACERT_PATH}/ca.pem" \
                                   -ca-key="${CACERT_PATH}/ca-key.pem" \
                                   -config="${CACERT_PATH}/ca-config.json" \
                                   -hostname="${CFSSL_HOSTNAMES//PRIVIP/$(getprivipaddr)}" \
                                   -profile=server \
                                   ${CERTS_PATH}/cfssl-csr.json | "$CFSSLJSON_BIN" -bare cfssl)

        if [ ! -f "${CERTS_PATH}/cfssl.pem" ] || [ ! -f "${CERTS_PATH}/cfssl-key.pem" ]; then
            echo "failed to gen cfssl cert" >&1
            exit 1
        fi
        chmod 0600 "${CERTS_PATH}/cfssl.pem" "${CERTS_PATH}/cfssl-key.pem"
    fi
}

function initca(){
    # Create the CA configuration file:
    if [ ! -f "${CACERT_PATH}/ca-config.json" ]; then
        mkdir -p ${CACERT_PATH}
        cat > "${CACERT_PATH}/ca-config.json" <<EOF
{
  "signing": {
    "default": {
      "expiry": "${CERT_VALIDITY_PERIOD}"
    },
    "profiles": {
      "server": {
        "usages": ["signing", "key encipherment", "server auth", "client auth"],
        "expiry": "${CERT_VALIDITY_PERIOD}"
      }
    }
  }
}
EOF
    fi

    if openssl verify -CAfile "${CACERT_PATH}/ca.pem" "${CACERT_PATH}/ca.pem" \
           && [ -f "${CACERT_PATH}/ca-key.pem" ]; then
        echo "using existing cacert" >&1
    else
        echo "generating new cacert" >&1

        # Create the CA certificate signing request:
        cat > "${CACERT_PATH}/ca-csr.json" <<EOF
{
  "CN": "${CN}",
  "key": {
    "algo": "${KEY_ALGO}",
    "size": ${KEY_SIZE}
  },
  "names": [
    {
      "C": "${C}",
      "L": "${L}",
      "O": "${O}",
      "OU": "${OU}",
      "ST": "${ST}"
    }
  ]
}
EOF

        # Generate the CA certificate and private key:
        (cd "${CACERT_PATH}" && "$CFSSL_BIN" gencert -initca ca-csr.json | "$CFSSLJSON_BIN" -bare ca)
        if [ ! -f "${CACERT_PATH}/ca.pem" ] || [ ! -f "${CACERT_PATH}/ca-key.pem" ]; then
            echo "failed to gen cacert" >&1
            exit 1
        fi
        chmod 0600 "${CACERT_PATH}/ca-key.pem"
    fi
}

start() {
    exec "$CFSSL_BIN" serve \
        -address ${CFSSL_BIND} \
        -port ${CFSSL_PORT} \
        -ca ${CACERT_PATH}/ca.pem \
        -ca-key ${CACERT_PATH}/ca-key.pem \
        -config ${CACERT_PATH}/ca-config.json \
        -tls-cert ${CERTS_PATH}/cfssl.pem \
        -tls-key ${CERTS_PATH}/cfssl-key.pem
}

function registerca(){
    if [ "${1}" == "etcd" ]; then
        # to keep the cert well formatted we encode it before putting it in consul
        /opt/etcd/bin/etcdctl set "cacerts/${C/ /_}_${CN/ /_}" "$(cat "$CACERT_PATH"/ca.pem | base64)"
    else
        # by default consider consul
        cat "$CACERT_PATH"/ca.pem | base64 | /opt/consul/bin/consul kv put -base64 "cacerts/${C/ /_}_${CN/ /_}" -
    fi
}

function register(){
    local address="${CFSSL_BIND}"
    if [ "${address}" == "0.0.0.0" ]; then
        address=$(getprivipaddr)
    fi

    if [ "${1}" == "etcd" ]; then
      /opt/etcd/bin/etcdctl set "services/${SERVICE_NAME}/$(althostname)" "${address}:${CFSSL_PORT}"
    else
        # by default consider consul
        service_id="$(althostname)_${SERVICE_NAME}"

        /usr/bin/curl --silent --fail --request PUT \
                      http://127.0.0.1:8500/v1/agent/service/register \
                      --data @- <<EOF
    {
        "ID": "${service_id}",
        "Name": "${SERVICE_NAME}",
        "Address": "${address}",
        "Port": ${CFSSL_PORT},
        "Check": {
            "DeregisterCriticalServiceAfter": "5m",
            "http": "https://${address}:${CFSSL_PORT}/api/v1/cfssl/scaninfo",
            "tls_skip_verify": true,
            "interval": "10s"
        }
    }
EOF
    fi
}

function deregister(){
    service_id="$(althostname)_${SERVICE_NAME}"
    /usr/bin/curl --silent --fail --request PUT http://127.0.0.1:8500/v1/agent/service/deregister/${service_id}
}

if [ "$CFSSL_MODE" != "server" ]; then
    log user.info "not in server mode. nothing to do. exiting."
    exit 0
fi

case $1 in
    initca)
        log user.info "initca"
        initca
        ;;
    cfsslcert)
        log user.info "cfsslcert"
        cfsslcert
        ;;
    start)
        log user.info "start"
        start
        ;;
    deregister)
        log user.info "deregister"
        deregister
        ;;
    register)
        log user.info "register"
        register $2
        ;;
    register-ca)
        log user.info "register-ca"
        registerca $2
        ;;
    *)
        log user.info "check"
        check
        ;;
esac
